# This file was *autogenerated* from the file secret.sage
from sage.all_cmdline import *   # import sage library

_sage_const_6 = Integer(12); _sage_const_2 = Integer(2); _sage_const_3 = Integer(3); _sage_const_0 = Integer(0)
from function_field_elliptic import EllipticFunctionField
from vector_bundle import VectorBundle, atiyah_bundle


def setup(q, a, b, F_, x_, y_, K_, O_, Inf_):
    global x, y, x6, y6, O6, F, K, O, C6, Inf
    F = F_
    x = x_
    y = y_
    K = K_
    O = O_
    Inf = Inf_

    F6 = GF(q**_sage_const_6 , 'a')
    C6 = EllipticCurve(F6, [a, b])
    K6 = EllipticFunctionField(C6)
    x6 = K6.base_field().gen()
    y6 = K6.gen()
    O6 = K6.maximal_order()

    _f = K.base_field().hom([x6])
    f  = K.hom([y6], _f)
    K6.base_field().register_coercion(_f)
    K6.register_coercion(f)


def bundle_from_point(P, r, d):
    P = O.ideal(x - P.x(), y - P.y()).place()
    L = VectorBundle(K, Inf - P)
    return atiyah_bundle(K, r, d, L)


def point_from_bundle(E, d):
    # d: degree of E
    L = E.determinant()
    D = L.coefficient_ideals()[_sage_const_0].divisor()
    P = C6(_sage_const_0)
    for p, m in D.list():
        I6 = p.prime_ideal() * O6
        for p6, _ in I6.divisor().list():
            X, Y = p6.prime_ideal().gens()
            P += m * C6(x6-X, y6-Y)

    if d < _sage_const_0:
        P = -P
    h = gcd(E.rank(), d)
    return P.change_ring(F).division_points(h)[_sage_const_0]


def reduced_bundle(E, d):
    r = ZZ(E.rank())
    P = point_from_bundle(E, d)
    return bundle_from_point(P, r, d)


flag = b'idek{1t_w45_ju5t_p01n7s_0n_7h3_curv3}'

